---
export interface Props {
  title: string;
}

const { title } = Astro.props;
// Import the WhatsApp button component
import Button from '../components/button.astro';
import InstagramPopup from '../components/InstagramPopup.astro'; // Importa o novo componente
---

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <slot />
    
    <!-- WhatsApp floating button that will appear on all pages -->
    <Button />
    
    <!-- scripts, etc. -->
    <InstagramPopup /> <!-- Renderiza o componente do pop-up -->

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const popup = document.getElementById('instagram-popup');
        const closeButton = document.getElementById('close-popup');
        const popupShownKey = 'instagramPopupShown';

        // Função para mostrar o pop-up
        const showPopup = () => {
          if (popup && !sessionStorage.getItem(popupShownKey)) {
            popup.classList.remove('hidden');
          }
        };

        // Função para esconder o pop-up
        const hidePopup = () => {
          if (popup) {
            popup.classList.add('hidden');
            sessionStorage.setItem(popupShownKey, 'true');
          }
        };

        // Event listener para o botão de fechar
        if (closeButton) {
          closeButton.addEventListener('click', hidePopup);
        }

        // Event listener para o scroll da página
        let scrollTriggered = false;
        window.addEventListener('scroll', () => {
          if (scrollTriggered || sessionStorage.getItem(popupShownKey)) return;

          const scrollPosition = window.scrollY || document.documentElement.scrollTop;
          const totalHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
          const scrollPercentage = (scrollPosition / totalHeight) * 100;

          if (scrollPercentage >= 50) {
            showPopup();
            scrollTriggered = true; // Garante que o pop-up seja acionado apenas uma vez por carregamento de página, mesmo que o sessionStorage não seja usado
          }
        });
      });
    </script>
  </body>
</html>

<style is:global>
  :root {
    --color-primary: #000000;
    --color-secondary: #fff;
    --color-accent: #333;
    --color-text: #333;
    --color-logo: #000;
    --font-family: 'Montserrat', sans-serif;
  }
  
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  html {
    font-family: var(--font-family);
    scroll-behavior: smooth;
  }
  
  body {
    background-color: var(--color-secondary);
    color: var(--color-primary);
    line-height: 1.6;
  }
  
  img {
    max-width: 100%;
    height: auto;
  }
  
  a {
    color: inherit;
    text-decoration: none;
  }
  
  .container {
    width: 90%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .section {
    padding: 5rem 0;
  }
  
  .btn {
    display: inline-block;
    padding: 0.8rem 1.5rem;
    background-color: var(--color-primary);
    color: var(--color-secondary);
    border: 1px solid var(--color-primary);
    font-weight: 500;
    transition: all 0.3s ease;
    cursor: pointer;
  }
  
  .btn:hover {
    background-color: transparent;
    color: var(--color-primary);
  }
  
  .btn-outline {
    background-color: transparent;
    color: var(--color-primary);
  }
  
  .btn-outline:hover {
    background-color: var(--color-primary);
    color: var(--color-secondary);
  }
  
  @media (max-width: 768px) {
    .section {
      padding: 3rem 0;
    }
  }
</style>
